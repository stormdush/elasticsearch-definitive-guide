[[hunspell]]
=== Hunspell 词干提取器

Elasticsearch提供基于词典的词干提取器。
Hunspell(hunspell.github.io)是被Open Office, LibreOffice, Chrome, Firefox, Thunderbird和众多其他开源和闭源项目使用的拼写检查器。

Hunspell 字典可以通过以下方式获得：

* http://extensions.openoffice.org/: 下载并解压 `.oxt` 扩展名的文件。
* http://mzl.la/157UORf: 下载并解压 `.xpi` 插件。
* http://download.services.openoffice.org/contrib/dictionaries/: 下载并解压 `.zip` 文件。

Hunspell 字典包含两个同名的文件，如`en_US`&#x2014;但扩展名不同:

`.dic`::

    包含所有根词，按字母顺序排列，再加上一个代码表示所有可能的前缀和后缀（合称为词缀）

`.aff`::

    包含.dic文件中列出的每个转为代码的前缀和后缀。

==== 安装字典

Hunspell 通过token过滤器查找字典目录,默认为/config/Hunspell/。.dic和.aff文件应放在一个子目录，其名为字典的语言或语言环境。例如,我们可以创建一个Hunspell词干提取器并使用美式英语来布局：

[source,text]
------------------------------------------------
config/
  └ hunspell/ <1>
      └ en_US/ <2>
          ├ en_US.dic
          ├ en_US.aff
          └ settings.yml <3>
------------------------------------------------
<1> Hunspell 字典的语言环境可以通过`config/elasticsearch.yml`的`indices.analysis.hunspell.dictionary.location`来设置修改
<2> `en_US` 是区域的名称或语言，我们会将它传递给`hunspell` token 过滤器.
<3> 每种语言的设置文件，会在下面描述。

==== 语言设置

`settings.yml` 文件包含用于设置适用于所有语言中的字典目录,例如:

[source,yaml]
-------------------------
---
ignore_case:          true
strict_affix_parsing: true

-------------------------

这些设置的意义是:

`ignore_case`::
+
--

Hunspell 字典默认大小写敏感: 姓氏`Booker` 和名词的`booker`是不同的含义,所以被提取的词干应该是不同的。hunspell词干提取器区分大小写的模式看起来是个好办法,但这也会使事情变得复杂:

* 一个句子开始词汇首字母大写, 因此似乎是一个专有名词。
* 输入文本可能全部是大写字母,在这种情况下,几乎没有词干会被找到。
* 用户可能用小写来搜索名字,在这种情况下没有匹配的词会被找到。

一般情况下,把`ignore_case`设置成`true`是一个好办法.

--

`strict_affix_parsing`::

字典的质量千差万别。一些网上的字典其.off文件中规则是畸形的。默认情况下,如果不能解析一个词缀的规则，Lucene将抛出一个异常。如果你需要处理一个损坏的词缀文件,您可以设置`strict_affix_parsing`为`false`，Lucene会忽略损坏规则。

.自定义词典
***********************************************

如果多个字典（.dic文件）被放置在相同的目录中,他们将在加载时合并在一起。这允许你用下载的字典定制自定义词典单词列表:

[source,text]
------------------------------------------------
config/
  └ hunspell/
      └ en_US/  <1>
          ├ en_US.dic
          ├ en_US.aff <2>
          ├ custom.dic
          └ settings.yml
------------------------------------------------
<1> `custom` 和 `en_US` 词典将合并。
<2> 多个 `.aff`文件是不被允许的,因为他们会导致规则混乱。

`.dic`和`.aff`文件的格式遵循 hunspell-dictionary-format中的描述。

***********************************************

==== 创建Hunspell Token Filter

一旦你的字典是安装在所有节点上,您可以定义一个hunspell牌过滤器使用:
一旦你的字典被部署在所有节点上，你就可以定义一个hunspell token filter来使用：

[source,json]
------------------------------------------------
PUT /my_index
{
  "settings": {
    "analysis": {
      "filter": {
        "en_US": {
          "type":     "hunspell",
          "language": "en_US" <1>
        }
      },
      "analyzer": {
        "en_US": {
          "tokenizer":  "standard",
          "filter":   [ "lowercase", "en_US" ]
        }
      }
    }
  }
}
------------------------------------------------
<1> 同名的`language`在同一字典目录中。

您可以通过`analyze` API测试新的分析器,并比较其输出的`english` 分析器:

[source,json]
------------------------------------------------
GET /my_index/_analyze?analyzer=en_US <1>
reorganizes

GET /_analyze?analyzer=english <2>
reorganizes
------------------------------------------------
<1> 返回 `organize`
<2> 返回 `reorgan`

An interesting property of the `hunspell` stemmer, as can be seen in the
preceding example, is that it can remove prefixes as well as as suffixes. Most
algorithmic stemmers remove suffixes only.

在前面的例子中我们可以看到，`hunspell stemmer` 的一个有趣的属性是，它可以删除前缀和后缀。大多数算法词干提取器只能删除后缀。

[TIP]
==================================================

Hunspell 字典可以使用仅几兆字节的RAM。幸运的是,Elasticsearch在每个节点只创建一个字典实例。所有使用相同的分片Hunspell分析器共享相同的实例。

==================================================

[[hunspell-dictionary-format]]
==== Hunspell 字典格式

尽管没必要理解Hunspell字典的格式如何使用Hunspell分析器,但理解格式会帮助你编写自己的自定义词典。它非常简单。

例如,在美国英语词典,`en_US.dic`文件包含一个条目,它看起来像这样:

[source,text]
-----------------------------------
analyze/ADSG
-----------------------------------

`en_US.aff`文件包含A、G、D和S的标识的前缀或后缀规则。每个标识对应一系列的规则,只有其中一个适当的匹配。每个规则有以下形式:

[source,text]
-----------------------------------
[type] [flag] [letters to remove] [letters to add] [condition]
-----------------------------------

例如,下面是后缀(SFX)规则 D。它表明，当一个单词以一个辅音(除了a,e,i,o,u),后跟一个y,它会移除y并且添加ied(例如,`ready` -> `readied`)。
[source,text]
-----------------------------------
SFX    D      y   ied  [^aeiou]y
-----------------------------------

`A`, `G`, `D`, 和 `S`标识的规则前面提到的如下:
The rules for the `A`, `G`, `D`, and `S` flags mentioned previously are as follows:

[source,text]
-----------------------------------
SFX D Y 4
SFX D   0     d          e <1>
SFX D   y     ied        [^aeiou]y
SFX D   0     ed         [^ey]
SFX D   0     ed         [aeiou]y

SFX S Y 4
SFX S   y     ies        [^aeiou]y
SFX S   0     s          [aeiou]y
SFX S   0     es         [sxzh]
SFX S   0     s          [^sxzhy] <2>

SFX G Y 2
SFX G   e     ing        e <3>
SFX G   0     ing        [^e]

PFX A Y 1
PFX A   0     re         . <4>
-----------------------------------
<1> `analyze` 以 `e` 结尾, 所以变成`analyzed`。
<2> `analyze` 不以 `s`, `x`, `z`, `h`, 或 `y`结尾, 因此不会被添加`s`变成`analyzes`。

<3> `analyze` 以`e` 结尾, 所以移除`e` 添加`ing` 变为`analyzing`。

<4> 添加前缀 `re` 变为 `reanalyze`。这条规则可以添加后缀变成 `reanalyzes`, `reanalyzed`,
    `reanalyzing`.

关于Hunspell语法的更多信息可以Hunspell文档网站上找到。
http://sourceforge.net/projects/hunspell/files/Hunspell/Documentation/
